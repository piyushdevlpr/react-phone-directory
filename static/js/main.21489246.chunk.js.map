{"version":3,"sources":["PhoneList.js","ViewPhone.js","App.js","serviceWorker.js","index.js"],"names":["PhoneList","e","react_default","a","createElement","className","class","onReset","this","props","addItem","placeholder","name","ref","inputElement1","value","text","onChange","handleInput","type","inputElement2","number","currentItem","Component","ViewPhone","deleteItm","key","_this","deleteItem","showlist","listitems","map","list","onClick","todoEntries","entries","console","log","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","preventDefault","setState","defineProperty","target","newItem","state","Date","now","items","concat","toConsumableArray","addtrue","toadd","toview","viewtrue","filteredItems","filter","check","show","src_PhoneList","src_ViewPhone","bind","assertThisInitialized","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21489246.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nclass PhoneList extends Component {\r\n  render() {\r\n    var e = <div></div>\r\n    return (\r\n      <div className=\"phoneListMain\">\r\n        <div className=\"header\" class=\"mb-1\">\r\n          <form  onReset={this.props.addItem}>\r\n            <input placeholder=\"Name\"\r\n                          class=\"form-control\" \r\n                          name = \"text\"\r\n                          ref={this.props.inputElement1}\r\n                          value={this.props.text}\r\n                          onChange={this.props.handleInput}\r\n            />\r\n            <br/>\r\n            <input placeholder=\"Number\"\r\n                          class=\"form-control\"\r\n                          name = \"number\"\r\n                          type = 'number'\r\n                          ref={this.props.inputElement2}\r\n                          value={this.props.number}\r\n                          onChange={this.props.handleInput}\r\n            />\r\n            <br/>\r\n            {this.props.currentItem(e)}\r\n            <br/>\r\n            <button class =\"btn btn-primary\" type=\"reset\"> Add Contact </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PhoneList","import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nclass ViewPhone extends Component {\r\ndeleteItm=key=>{\r\n        this.props.deleteItem(key)\r\n}\r\nshowlist=listitems=>{\r\n    const listItems = listitems.map((list)=> <li class=\"list-group-item mb-1 text-center\" key={list.key} ><span class=\"mx-5\">{list.text}</span> <span class=\"mx-5\">{list.number}</span> <button class=\"mx-5 btn btn-danger\" onClick={() => this.deleteItm(list.key)}>delete</button></li>)\r\n    return listItems ;\r\n}\r\n  render() {\r\n    const todoEntries = this.props.entries\r\n    //const listItems = todoEntries.map()\r\n    console.log(todoEntries)\r\n    return <ul class = \"list-group mb-1\">  {this.showlist(todoEntries)}\r\n    </ul>\r\n\r\n    // return <ul className=\"theList\" >{listItems}</ul>\r\n  }\r\n}\r\n\r\nexport default ViewPhone","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PhoneList from './PhoneList' ;\nimport ViewPhone from './ViewPhone' ;\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super() ;\n    this.state = {\n      items: [],\n      text:'',\n      number: '',\n      toadd: false,\n      toview:false\n    }\n    this.handleInput = this.handleInput.bind(this)\n  }\n  handleInput = e => {\n    e.preventDefault() ;\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n  addItem = e => {\n    //e.preventDefault()\n    const newItem = {text :this.state.text, number : this.state.number , key : Date.now()}\n    //const newItem = this.state.currentItem\n    if (newItem.text !== '' && newItem.number !== '') {\n      console.log(newItem)\n      const items = [...this.state.items, newItem]\n      this.setState({\n        items: items,\n        text: \"\",\n        number: \"\",\n      })\n    }\n  }\n  addtrue = e => {\n    this.setState({\n      toadd: true,\n      toview:false\n    })\n  }\n  viewtrue = e =>{\n    this.setState({\n      toadd: false,\n      toview:true\n    })\n  }\n  deleteItem = key => {\n    const filteredItems = this.state.items.filter(items => {\n      return items.key !== key\n    })\n    this.setState({\n      items: filteredItems,\n    })\n  }\n  currentItem = e =>{\n    e = (<div>\n    <label>Name : </label>\n   {this.state.text}  \n   <br/>\n   <label>Number : </label>\n   {this.state.number} \n   \n   </div>) \n   return e ;\n  }\n  check = show =>{\n    show = <div></div>\n    if(this.state.toadd){\n      return <PhoneList \n      addItem={this.addItem}\n      inputElement1={this.inputElement1}\n      inputElement2={this.inputElement2}\n      handleInput={this.handleInput}\n      currentItem={this.currentItem}\n      />\n    }else if(this.state.toview){\n      return <ViewPhone \n      entries={this.state.items}\n      deleteItem={this.deleteItem} />\n    }\n  }\n  render() {\n   var show = <div></div>;\n    return (\n      <div className=\"App\" class=\"container\">\n      <div class=\"jumbotron text-center\"><h1>PHONE DIRECTORY</h1></div>\n          <div>\n            <button class=\"btn btn-primary container mb-1\" onClick={this.addtrue}>add</button>\n          </div>\n          <div>\n\n          </div>\n          <div>\n            <button class=\"btn btn-primary container mb-1\" onClick={this.viewtrue}>view</button>\n          </div>\n          {console.log(this.state)}\n          {this.check(show)}\n          <div>\n              {show}\n          </div>\n          \n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}